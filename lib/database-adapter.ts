// lib/database-adapter.ts - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –ë–î
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

import { BookingData, Room } from './database'

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const createDatabase = async () => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL (PostgreSQL), –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL
  if (process.env.DATABASE_URL) {
    console.log('üêò Using PostgreSQL database for production')
    const { database } = await import('./database-postgres')
    await database.connect()
    return database
  } else {
    console.log('üíæ Using SQLite database for development') 
    const { database } = await import('./database')
    return database
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let databaseInstance: any = null

export const getDatabase = async () => {
  if (!databaseInstance) {
    databaseInstance = await createDatabase()
  }
  return databaseInstance
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º database –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const database = {
  async saveBooking(booking: Omit<BookingData, 'updatedAt'>): Promise<boolean> {
    const db = await getDatabase()
    return db.saveBooking(booking)
  },

  async getBooking(id: string): Promise<BookingData | null> {
    const db = await getDatabase()
    return db.getBooking(id)
  },

  async updateBookingStatus(
    id: string,
    status: 'confirmed' | 'rejected',
    adminMessage?: string,
    roomId?: string,
    roomName?: string
  ): Promise<boolean> {
    const db = await getDatabase()
    return db.updateBookingStatus(id, status, adminMessage, roomId, roomName)
  },

  async getAllRooms(): Promise<Room[]> {
    const db = await getDatabase()
    return db.getAllRooms()
  },

  async getAvailableTimeSlots(date: string, bookingType: string): Promise<string[]> {
    const db = await getDatabase()
    return db.getAvailableTimeSlots(date, bookingType)
  },

  async getAvailableRooms(date: string, time: string, duration: number, bookingType: string): Promise<Room[]> {
    const db = await getDatabase()
    return db.getAvailableRooms(date, time, duration, bookingType)
  },

  async getAllBookings(status?: string): Promise<BookingData[]> {
    const db = await getDatabase()
    return db.getAllBookings(status)
  },

  async getBookingStats(): Promise<{
    total: number
    pending: number
    confirmed: number
    rejected: number
    byType: { type: string; count: number }[]
    recent: BookingData[]
  }> {
    const db = await getDatabase()
    return db.getBookingStats()
  }
}