// app/api/availability/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { database } from '@/lib/database'

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url)
    const date = searchParams.get('date')
    const bookingType = searchParams.get('type') || 'individual'
    const startTime = searchParams.get('startTime')
    const duration = searchParams.get('duration')

    if (!date) {
      return NextResponse.json(
        { error: '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' },
        { status: 400 }
      )
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ ${date} –¥–ª—è —Ç–∏–ø–∞ ${bookingType}`)

    // If checking for conflicts with a specific time and duration
    if (startTime && duration) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è ${startTime} –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ${duration}—á`)
      
      const conflicts = await database.checkBookingConflicts(date, startTime, duration, bookingType)
      
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${conflicts.length}`)
      
      return NextResponse.json({ 
        success: true, 
        conflicts,
        hasConflicts: conflicts.length > 0
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    const availableSlots = await database.getAvailableTimeSlots(date, bookingType)

    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: ${availableSlots.join(', ')}`)

    return NextResponse.json({ 
      success: true, 
      availableSlots 
    })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', err)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}