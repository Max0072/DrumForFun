// app/api/booking/confirm/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { database } from '@/lib/database'
import { sendEmail, emailTemplates } from '@/lib/email'

export async function POST(req: NextRequest) {
    try {
        const { bookingId, status, adminMessage, roomId, roomName } = await req.json()

        if (!bookingId || !status) {
            return NextResponse.json(
                { error: 'Booking ID –∏ —Å—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
                { status: 400 }
            )
        }

        if (!['confirmed', 'rejected'].includes(status)) {
            return NextResponse.json(
                { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' },
                { status: 400 }
            )
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const booking = await database.getBooking(bookingId)
        
        if (!booking) {
            return NextResponse.json(
                { error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
                { status: 404 }
            )
        }

        if (booking.status !== 'pending') {
            return NextResponse.json(
                { error: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' },
                { status: 400 }
            )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await database.updateBookingStatus(
            bookingId, 
            status, 
            adminMessage || undefined, 
            roomId || undefined, 
            roomName || undefined
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (status === 'confirmed') {
            const bookingDateTime = `${booking.date} ${booking.time}`
            const template = emailTemplates.bookingConfirmed(
                bookingId, 
                bookingDateTime, 
                roomName || 'Not assigned', 
                adminMessage || undefined
            )
            await sendEmail({
                to: booking.email,
                subject: template.subject,
                html: template.html
            })
        } else if (status === 'rejected') {
            const template = emailTemplates.bookingRejected(bookingId, adminMessage || undefined)
            await sendEmail({
                to: booking.email,
                subject: template.subject,
                html: template.html
            })
        }

        console.log(`üìã –ó–∞—è–≤–∫–∞ ${bookingId} ${status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}`)

        return NextResponse.json({ 
            success: true, 
            message: `–ó–∞—è–≤–∫–∞ ${status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}` 
        })
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err)
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}