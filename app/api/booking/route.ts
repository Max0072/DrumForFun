// app/api/booking/route.ts
import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'
import { database, type BookingData } from '@/lib/database'
import { sendEmail, emailTemplates } from '@/lib/email'

interface BookingFormData {
    name: string
    email: string
    phone: string
    date: string
    time: string
    duration: string
    notes?: string
    lessonType: string
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    bandSize?: string
    guestCount?: string
    instrument?: string
    partyType?: string
}

function generateBookingId(): string {
    return crypto.randomBytes(8).toString('hex').toUpperCase()
}

function formatBookingType(data: BookingFormData): string {
    if (data.instrument) return 'Individual Practice'
    if (data.bandSize) return 'Band Rehearsal'
    if (data.partyType) return 'Birthday Party'
    return 'Unknown'
}

function formatBookingDetails(data: BookingFormData): string {
    const bookingType = formatBookingType(data)
    const bookingDate = new Date(data.date).toLocaleDateString('ru-RU')
    
    let details = `üìÖ –¢–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingType}
üë§ –ò–º—è: ${data.name}
üìß Email: ${data.email}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìÖ –î–∞—Ç–∞: ${bookingDate}
‚è∞ –í—Ä–µ–º—è: ${data.time}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.duration} —á–∞—Å(–∞/–æ–≤)`

    if (data.instrument) {
        details += `\nüéµ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${data.instrument}`
    }
    
    if (data.bandSize) {
        details += `\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: ${data.bandSize}`
    }
    
    if (data.guestCount) {
        details += `\nüéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${data.guestCount}`
    }
    
    if (data.partyType) {
        details += `\nüéÇ –¢–∏–ø –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: ${data.partyType}`
    }
    
    if (data.notes) {
        details += `\nüìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: ${data.notes}`
    }

    return details
}

async function sendNotificationEmails(bookingId: string, data: BookingFormData) {
    const bookingDetails = formatBookingDetails(data)
    
    // Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@drumschool.com'
    const adminTemplate = emailTemplates.adminNotification(bookingId, bookingDetails)
    
    await sendEmail({
        to: adminEmail,
        subject: adminTemplate.subject,
        html: adminTemplate.html
    })
    
    // Email –∫–ª–∏–µ–Ω—Ç—É
    const clientTemplate = emailTemplates.clientConfirmation(bookingId, bookingDetails)
    
    await sendEmail({
        to: data.email,
        subject: clientTemplate.subject,
        html: clientTemplate.html
    })
}

export async function POST(req: NextRequest) {
    try {
        const data: BookingFormData = await req.json()

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!data.name || !data.email || !data.phone || !data.date || !data.time) {
            return NextResponse.json(
                { error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
                { status: 400 }
            )
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(data.email)) {
            return NextResponse.json(
                { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' },
                { status: 400 }
            )
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞—è–≤–∫–∏
        const bookingId = generateBookingId()

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const booking: Omit<BookingData, 'updatedAt'> = {
            id: bookingId,
            name: data.name,
            email: data.email,
            phone: data.phone,
            date: data.date,
            time: data.time,
            duration: data.duration,
            notes: data.notes,
            lessonType: data.lessonType,
            bandSize: data.bandSize,
            guestCount: data.guestCount,
            instrument: data.instrument,
            partyType: data.partyType,
            status: 'pending' as const,
            type: formatBookingType(data),
            createdAt: new Date().toLocaleString("en-US", { timeZone: "Europe/Nicosia" })
        }

        console.log('üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', booking)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await database.saveBooking(booking)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö email)
        try {
            await sendNotificationEmails(bookingId, data)
        } catch (emailError) {
            console.error('‚ö†Ô∏è Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', emailError)
        }

        return NextResponse.json({ 
            success: true, 
            message: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞', 
            bookingId 
        })
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', err)
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        )
    }
}